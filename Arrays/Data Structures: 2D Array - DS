Question: 

Given a 6 X 6 2D Array, arr:

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0

We define an hourglass in A to be a subset of values with indices falling in this 
pattern in arr's graphical representation:

a b c
  d
e f g

There are 16 hourglasses in arr, and an hourglass sum is the sum of an hourglass' values.
Calculate the hourglass sum for every hourglass in arr, then print the maximum hourglass sum.

For example, given the 2D array:

-9 -9 -9  1 1 1 
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0
 
We calculate the following 16 hourglass values:

-63, -34, -9, 12, 
-10, 0, 28, 23, 
-27, -11, -2, 10, 
9, 17, 25, 18

Our highest hourglass value is  from the hourglass:

0 4 3
  1
8 6 6

Solution:

#include <bits/stdc++.h>

using namespace std;

// Complete the hourglassSum function below.
int hourglassSum(vector<vector<int>> arr) {
	int top = 0;
	int mid = 0;
	int bottom = 0;
	int sum = 0;
	int height = arr.size();
	int width = arr[0].size();
	for (int i = 0; i < width - 2; i++) {
		for (int j = 0; j < height - 2; j++) {
			top = arr[i][j] + arr[i][j + 1] + arr[i][j + 2];
			mid = arr[i + 1][j + 1];
			bottom = arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2];
			if (top + mid + bottom > sum) {
				sum = top + mid + bottom;
			}
		}
	}
	return sum;
}

int main()
{
	ofstream fout(getenv("OUTPUT_PATH"));

	vector<vector<int>> arr(6);
	for (int i = 0; i < 6; i++) {
		arr[i].resize(6);

		for (int j = 0; j < 6; j++) {
			cin >> arr[i][j];
		}

		cin.ignore(numeric_limits<streamsize>::max(), '\n');
	}

	int result = hourglassSum(arr);
	fout << result << "\n";

	fout.close();

	return 0;
}
